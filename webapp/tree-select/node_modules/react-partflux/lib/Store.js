'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 被外部复合组件调用:
 * 构造函数：
 * 1、stateFns: { setState, getState, initState }
 * 2、reducers: reducer组成的json，
 *   key是state的key，value是reducer处理函数
 * 3、eventFns: 事件函数数组，在dispatch调用后更新state之后会被依次调用
 * 4、global:全局变量，可通过setGlobal, getGlobal读写
 * 5、config:预留
 *
 * 暴露方法：
 * getState, dispatch, init， reinit, getGlobal，setGlobal
 *
 * 注：
 * 1、this.init()会在Provider的DidMount时自动被调用
 * 2、this.reinit(newConfig)会在Provider里当config变化时调用，
 * 不做任何处理，为以后预留
 */
function Store() {
  var stateFns = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var reducers = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var eventFns = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

  var _this = this;

  var global = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
  var config = arguments.length <= 4 || arguments[4] === undefined ? {} : arguments[4];
  var setState = stateFns.setState;
  var getState = stateFns.getState;
  var initState = stateFns.initState;

  var _global = _lodash2.default.merge({}, global);

  this.getState = getState;
  this.getGlobal = function () {
    return _global;
  };
  this.setGlobal = function (newGlobal) {
    if (!newGlobal) return;
    _lodash2.default.forIn(newGlobal, function (value, key) {
      _global[key] = value;
    });
  };

  this.dispatch = function (action) {
    var hasChanged = false;
    var oldState = getState();
    var newState = _lodash2.default.merge({}, oldState);
    _lodash2.default.forIn(reducers, function (reducer, key) {
      var oldValue = oldState[key];
      var newValue = reducer(oldValue, action, getState, _this.getGlobal);
      if (oldValue !== newValue) {
        newState[key] = newValue;
        hasChanged = true;
      }
    });

    if (hasChanged) {
      setState(newState);
    }

    _lodash2.default.forEach(eventFns, function (eventFn, key) {
      eventFn(oldState, newState, action.type, hasChanged);
    });
  };

  this.init = function () {
    if (initState) {
      initState().then(function (stateJson) {
        setState(stateJson);
      });
    }
  };

  this.reInit = function (newConfig) {};
}

exports.default = Store;