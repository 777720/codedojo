'use strict';

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _sinon = require('sinon');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _Store = require('../Store');

var _Store2 = _interopRequireDefault(_Store);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('partflux Store', function () {
  it('store have six method', function () {
    var store = new _Store2.default();
    var methods = _lodash2.default.keysIn(store);
    _assert2.default.equal(6, methods.length);
  });

  it('getState fn should return state', function () {
    var state = { name: 'tom' };
    var stateFns = {
      getState: function getState() {
        return state;
      }
    };
    var store = new _Store2.default(stateFns);
    var result = store.getState();
    _assert2.default.equal(state, result);
    _assert2.default.deepEqual(state, result);
  });

  it('state can be changed by app', function () {
    var state = { name: 'tom' };
    var stateFns = {
      getState: function getState() {
        return state;
      }
    };
    var store = new _Store2.default(stateFns);
    _lodash2.default.merge(state, { age: 20 });
    var result = store.getState();
    _assert2.default.equal(state, result);
    _assert2.default.deepEqual(state, result);
  });

  it('getGlobal should return copy of global', function () {
    var global = { name: 'tom' };
    var store = new _Store2.default({}, {}, [], global);
    var result = store.getGlobal();
    _assert2.default.notEqual(global, result);
    _assert2.default.deepEqual(global, result);
  });

  it('setGlobal should merge global', function () {
    var global = { name: 'tom' };
    var store = new _Store2.default({}, {}, [], global);
    store.setGlobal({ age: 20 });
    var result = store.getGlobal();
    _assert2.default.deepEqual({ name: 'tom', age: 20 }, result);
  });

  it('dispatch should merge state', function () {
    var state = { name: 'tom' };
    var stateFns = {
      setState: function setState(newState) {
        return _lodash2.default.merge(state, newState);
      },
      getState: function getState() {
        return state;
      }
    };
    var ageType = 'CHANGEAGE';
    var ageReducer = function ageReducer() {
      var age = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
      var action = arguments[1];

      return action.type === ageType ? action.age : age;
    };
    var reducers = { age: ageReducer };
    var store = new _Store2.default(stateFns, reducers);

    var action = {
      type: ageType,
      age: 20
    };
    store.dispatch(action);
    var result = store.getState();
    _assert2.default.equal(state, result);
    _assert2.default.deepEqual({ name: 'tom', age: 20 }, result);
  });

  it('dispatch should call getState、reducer、setState、eventFn', function () {
    var stateFns = {
      setState: (0, _sinon.spy)(),
      getState: (0, _sinon.stub)().returns({ name: 'tom' })
    };
    var reducers = { age: (0, _sinon.stub)().returns(20) };
    var eventFn1 = (0, _sinon.spy)();
    var eventFn2 = (0, _sinon.spy)();
    var eventFns = [eventFn1, eventFn2];
    var store = new _Store2.default(stateFns, reducers, eventFns);
    store.dispatch({ type: 'any', age: 20 });

    (0, _assert2.default)(stateFns.getState.calledOnce);
    (0, _assert2.default)(reducers.age.calledOnce);
    (0, _assert2.default)(reducers.age.calledWith(undefined, { type: 'any', age: 20 }));
    (0, _assert2.default)(stateFns.setState.calledOnce);
    (0, _assert2.default)(stateFns.setState.calledWith({ name: 'tom', age: 20 }));
    (0, _assert2.default)(eventFn1.calledOnce);
    (0, _assert2.default)(eventFn1.calledWith({ name: 'tom' }, { name: 'tom', age: 20 }, 'any', true));
    (0, _assert2.default)(eventFn2.calledOnce);
    (0, _assert2.default)(eventFn2.calledWith({ name: 'tom' }, { name: 'tom', age: 20 }, 'any', true));
  });
});