'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 为组件增加实例化的Action及state映射来的props：
 * 1、使用方式
 * <Wrapper propsFn={}  ActionClass={} actions={}>
 *    <ChildComponent/>
 * </Provider>
 * 2、propsFn例子：propsFn = (state, global)=>{
 *      return {
 *        prop1: state.state1
 *      }
 *   }
 * 3、ActionClass为Action类，要求：
 *    2.1 构造函数传入三个参数，在实例中使用：
 *      dispatch（函数）、getState（函数)、getGlobal（函数，获取全局参数）
 *    2.2 输出的this.actions为要绑定的函数json
 * 4、actions为json（函数的组合），在每个函数里可调用this.store
 *  例如：this.store.dispatch(...)
 *  注：不要用箭头函数来定义actions里的函数,因为在Wrapper里要bind this
 */

var Wrapper = function (_Component) {
  _inherits(Wrapper, _Component);

  function Wrapper(props, context) {
    _classCallCheck(this, Wrapper);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Wrapper).call(this, props, context));

    var ActionClass = props.ActionClass;
    var actions = props.actions;
    var store = context.store;

    if (ActionClass && store) {
      _this.childAction = new ActionClass(store.dispatch, store.getState, store.getGlobal);
    }

    if (actions && store) {
      (function () {
        var actionHost = { store: store };
        _this.actions = _lodash2.default.mapValues(actions, function (fn) {
          return fn.bind(actionHost);
        });
      })();
    }
    return _this;
  }

  _createClass(Wrapper, [{
    key: 'render',
    value: function render() {
      var _props = this.props;
      var propsFn = _props.propsFn;
      var children = _props.children;
      var store = this.context.store;

      (0, _invariant2.default)(children && (typeof children === 'undefined' ? 'undefined' : _typeof(children)) === 'object', '必须有且有一个children！');

      var newProps = {};
      if (this.childAction) {
        newProps = _lodash2.default.merge(newProps, this.childAction.actions);
      }
      if (store && propsFn) {
        newProps = _lodash2.default.merge(newProps, propsFn(store.getState(), store.getGlobal()));
      }
      if (this.actions) {
        newProps = _lodash2.default.merge(newProps, this.actions);
      }
      if (newProps !== {}) {
        return _react2.default.cloneElement(children, newProps);
      }
      return children;
    }
  }]);

  return Wrapper;
}(_react.Component);

Wrapper.contextTypes = {
  store: _react.PropTypes.object
};

Wrapper.propTypes = {
  ActionClass: _react.PropTypes.func,
  actions: _react.PropTypes.object,
  propsFn: _react.PropTypes.func,
  children: _react.PropTypes.node
};

exports.default = Wrapper;