'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Store = require('./Store');

var _Store2 = _interopRequireDefault(_Store);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Provider组件，将一个组件包装成flux组件
 * 1、传入props
 *  StoreClass: 默认为Store，允许替换为扩展出来的其它Store类
 *  host： 一般为App实例,
 *  reducers: reducer(field, action, getState, getGlobal)
 *  eventFns,
 *  global,
 *  initState: need return a promise(stateJson)

 * 2、如果global变化会自动执行store.setGlobal(newGlobal)
 * 3、如果config变化会自动执行store.init(newConfig)
 */

var Provider = function (_Component) {
  _inherits(Provider, _Component);

  function Provider() {
    _classCallCheck(this, Provider);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Provider).apply(this, arguments));
  }

  _createClass(Provider, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { store: this.store };
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _props = this.props;
      var StoreClass = _props.StoreClass;
      var host = _props.host;
      var reducers = _props.reducers;
      var eventFns = _props.eventFns;
      var global = _props.global;
      var config = _props.config;
      var initState = _props.initState;

      var stateFns = {
        setState: host.setState.bind(host),
        getState: function getState() {
          return host.state;
        },
        initState: initState ? initState.bind(host) : undefined
      };
      this.store = new StoreClass(stateFns, reducers, eventFns, global, config);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.store.init) {
        this.store.init();
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var global = nextProps.global;
      var config = nextProps.config;
      var _props2 = this.props;
      var preGlobal = _props2.global;
      var preConfig = _props2.config;

      if (global && this.store && JSON.stringify(global) !== JSON.stringify(preGlobal)) {
        this.store.setGlobal(global);
      }
      if (config && this.store && JSON.stringify(config) !== JSON.stringify(preConfig)) {
        this.store.reInit(config);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.Children.only(this.props.children);
    }
  }]);

  return Provider;
}(_react.Component);

Provider.defaultProps = {
  StoreClass: _Store2.default
};

Provider.propTypes = {
  StoreClass: _react.PropTypes.func,
  host: _react.PropTypes.object.isRequired,
  reducers: _react.PropTypes.object,
  eventFns: _react.PropTypes.arrayOf(_react.PropTypes.func),
  global: _react.PropTypes.object,
  config: _react.PropTypes.object,
  initState: _react.PropTypes.func,
  children: _react.PropTypes.element.isRequired
};

Provider.childContextTypes = {
  store: _react.PropTypes.object.isRequired
};

exports.default = Provider;